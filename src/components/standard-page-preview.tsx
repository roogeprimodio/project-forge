"use client";

import React, { useEffect, useState } from 'react';
import type { Project } from '@/types/project';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { Loader2, ShieldAlert, Wand2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import MarkdownPreview from './markdown-preview'; // For rendering generated Markdown
import { useToast } from '@/hooks/use-toast';

// Import server actions for AI generation
import {
  generateCoverPageAction,
  generateCertificateAction,
  generateDeclarationAction,
  generateAbstractAction,
  generateAcknowledgementAction,
} from '@/app/actions';

interface StandardPagePreviewProps {
  pageName: string;
  project: Project;
}

// Helper function to generate static placeholder content for standard pages
const getStaticPlaceholderContent = (pageName: string, project: Project): React.ReactNode => {
  // This function remains for pages NOT generated by AI or as a fallback
  switch (pageName) {
    case 'Cover Page':
      return (
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold mt-12">{project.title || '[Project Title]'}</h1>
          <p className="text-lg">by</p>
          <p className="text-xl font-semibold">{(project.teamDetails?.split('\n').map(member => member.split(' - ')[0]).join(', ')) || '[Team Members]'}</p>
          <div className="mt-8 text-sm">
            <p>Enrollment Numbers: {(project.teamDetails?.split('\n').map(member => member.split(' - ')[1]).join(', ')) || '[Enrollment Numbers]'}</p>
            <p>{project.branch || '[Branch]'}</p>
            <p>{project.instituteName || '[Institute Name]'}</p>
            {project.universityLogoUrl && <img src={project.universityLogoUrl} alt="University Logo" data-ai-hint="university logo" className="mx-auto h-16 mt-4 object-contain" />}
            {project.collegeLogoUrl && <img src={project.collegeLogoUrl} alt="College Logo" data-ai-hint="college logo" className="mx-auto h-12 mt-2 object-contain" />}
            <p className="mt-8">{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
          </div>
           <p className="text-xs italic text-muted-foreground mt-6">Click "Generate with AI" for updated content.</p>
        </div>
      );
    case 'Certificate':
      return (
        <div className="space-y-4">
          <h2 className="text-2xl font-semibold text-center mb-8">Certificate</h2>
          <p>This is to certify that the project report titled "<strong>{project.title || '[Project Title]'}</strong>" submitted by:</p>
          <ul className="list-disc list-inside ml-4">
            {(project.teamDetails?.split('\n').map((member, idx) => <li key={idx}>{member || `[Member ${idx+1}]`}</li>)) || <li>[Team Member List]</li>}
          </ul>
          <p>is a bonafide record of work carried out by them under my/our supervision and guidance in partial fulfillment of the requirements for the award of the degree of Bachelor of Engineering in {project.branch || '[Branch]'} at {project.instituteName || '[Institute Name]'}.</p>
          <div className="mt-16 grid grid-cols-2 gap-8">
            <div>
              <p className="mt-8 border-t pt-2">_________________________</p>
              <p>{project.guideName || '[Guide Name]'}</p>
              <p>Project Guide</p>
            </div>
            <div>
              <p className="mt-8 border-t pt-2">_________________________</p>
              <p>{project.hodName || '[Head of Department Name]'}</p>
              <p>Head of Department, {project.branch || '[Branch]'}</p>
            </div>
          </div>
          <p className="text-xs italic text-muted-foreground mt-6">Click "Generate with AI" for updated content.</p>
        </div>
      );
    // ... other static placeholders for List of Figures, Tables, Abbreviations, TOC if needed
    default:
      return (
        <div className="flex flex-col items-center justify-center text-center text-muted-foreground p-4 h-full">
          <ShieldAlert className="w-10 h-10 md:w-12 md:h-12 opacity-50 mb-3" />
          <p>Content for "{pageName}" is typically compiled or requires specific formatting not shown in this basic preview.</p>
          {(pageName === "List of Figures" || pageName === "List of Tables" || pageName === "Abbreviations" || pageName === "Table of Contents") &&
            <p className="text-xs mt-2">This will be auto-generated during export or needs manual creation.</p>
          }
        </div>
      );
  }
};

export const StandardPagePreview: React.FC<StandardPagePreviewProps> = ({ pageName, project }) => {
  const [generatedContent, setGeneratedContent] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  // Reset generated content when pageName or project details relevant to AI change
  useEffect(() => {
    setGeneratedContent(null);
    setError(null);
  }, [pageName, project.title, project.projectContext, project.teamDetails, project.instituteName, project.branch, project.guideName, project.hodName]);

  const aiGeneratablePages = ["Cover Page", "Certificate", "Declaration", "Abstract", "Acknowledgement"];
  const canAiGenerate = aiGeneratablePages.includes(pageName);

  const handleGenerateWithAi = async () => {
    if (!project) return;
    setIsLoading(true);
    setError(null);
    setGeneratedContent(null);

    try {
      let result;
      switch (pageName) {
        case "Cover Page":
          result = await generateCoverPageAction({
            projectTitle: project.title,
            teamDetails: project.teamDetails,
            branch: project.branch || "N/A",
            instituteName: project.instituteName || "N/A",
            universityLogoUrl: project.universityLogoUrl,
            collegeLogoUrl: project.collegeLogoUrl,
            degree: "Bachelor of Engineering", // Default or from project type
            submissionDate: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
          });
          if ('coverPageMarkdown' in result) setGeneratedContent(result.coverPageMarkdown);
          break;
        case "Certificate":
          result = await generateCertificateAction({
            projectTitle: project.title,
            teamDetails: project.teamDetails,
            branch: project.branch || "N/A",
            instituteName: project.instituteName || "N/A",
            guideName: project.guideName || "[Guide Name]",
            hodName: project.hodName || "[HOD Name]",
            collegeLogoUrl: project.collegeLogoUrl,
          });
          if ('certificateMarkdown' in result) setGeneratedContent(result.certificateMarkdown);
          break;
        case "Declaration":
          result = await generateDeclarationAction({
            projectTitle: project.title,
            teamDetails: project.teamDetails,
            branch: project.branch || "N/A",
            instituteName: project.instituteName || "N/A",
            guideName: project.guideName || "[Guide Name]",
          });
          if ('declarationMarkdown' in result) setGeneratedContent(result.declarationMarkdown);
          break;
        case "Abstract":
          if (!project.projectContext?.trim()) {
            throw new Error("Project context is required to generate an abstract.");
          }
          result = await generateAbstractAction({
            projectTitle: project.title,
            projectContext: project.projectContext,
          });
          if ('abstractMarkdown' in result) setGeneratedContent(result.abstractMarkdown);
          break;
        case "Acknowledgement":
          result = await generateAcknowledgementAction({
            projectTitle: project.title,
            guideName: project.guideName || "[Guide Name]",
            instituteName: project.instituteName || "N/A",
            branch: project.branch || "N/A",
            hodName: project.hodName,
            teamDetails: project.teamDetails,
          });
          if ('acknowledgementMarkdown' in result) setGeneratedContent(result.acknowledgementMarkdown);
          break;
        default:
          throw new Error(`AI generation not configured for ${pageName}`);
      }

      if (result && 'error' in result && result.error) {
          // Use a more specific error message
          throw new Error(`AI generation failed for ${pageName}: ${result.error}`);
      }
      toast({ title: `${pageName} Content Generated`, description: "AI has generated the content for this page." });

    } catch (err: any) {
      const errorMessage = err instanceof Error ? err.message : "An unknown error occurred.";
      setError(errorMessage);
      toast({ variant: "destructive", title: `Failed to Generate ${pageName}`, description: errorMessage });
      console.error(`Error generating ${pageName}:`, err);
    } finally {
      setIsLoading(false);
    }
  };


  const displayContent = generatedContent !== null ? (
    <MarkdownPreview content={generatedContent} />
  ) : (
    getStaticPlaceholderContent(pageName, project)
  );

  return (
    <Card className="shadow-lg w-full h-full flex flex-col">
      <CardHeader className="flex-shrink-0">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
          <div>
            <CardTitle className="text-xl md:text-2xl text-primary text-glow-primary">
              Preview: {pageName}
            </CardTitle>
            <CardDescription>This is a preview of how the "{pageName}" might look in the final report.</CardDescription>
          </div>
          {canAiGenerate && (
            <Button onClick={handleGenerateWithAi} disabled={isLoading} size="sm" className="hover:glow-primary focus-visible:glow-primary w-full sm:w-auto mt-2 sm:mt-0">
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Wand2 className="mr-2 h-4 w-4" />}
              {isLoading ? `Generating ${pageName}...` : `Generate ${pageName} with AI`}
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent className="flex-grow overflow-hidden">
        <ScrollArea className="h-full pr-1">
          {error && (
            <div className="my-4 p-3 bg-destructive/10 border border-destructive text-destructive rounded-md text-sm">
              <p className="font-semibold">Error Generating Content:</p>
              <p>{error}</p>
            </div>
          )}
          <div
            className={cn(
              "bg-white dark:bg-neutral-900 shadow-xl rounded-sm mx-auto", // Use shadow-xl for more pop
              "p-6 sm:p-10 md:p-16", // Increased padding
              "w-full max-w-[210mm]", // A4 width
              "min-h-[297mm] md:min-h-[calc(1.4142*var(--a4-width-val,210mm))]", // A4 height based on multiplier
              "aspect-[210/297]", // Maintain A4 aspect ratio
              "text-sm sm:text-base" // Responsive base font size
            )}
            style={{
              '--a4-width-val': '210mm', // CSS variable for width
               boxSizing: 'border-box',
            } as React.CSSProperties}
          >
            {displayContent}
          </div>
        </ScrollArea>
      </CardContent>
       {generatedContent !== null && (
        <CardFooter>
            <p className="text-xs text-muted-foreground italic">This content was generated by AI. Review and edit as needed.</p>
        </CardFooter>
       )}
    </Card>
  );
};
""
